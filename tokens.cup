
import java_cup.runtime.*;

terminal READ;
terminal PRINT;
terminal PRINTLINE;
terminal TIMES;
terminal DOUBLE_PLUS;
terminal DOUBLE_MINUS;
terminal PLUS;
terminal MINUS;
terminal DIVIDE;
terminal SEMI;
terminal EQ;
terminal ASSMNT;
terminal CLASS;
terminal DOUBLE_AND;
terminal DOUBLE_OR;
terminal ELSE;
terminal IF;
terminal WHILE;
terminal RETURN;
terminal VOID;
terminal LEFT_PARENTHESIS;
terminal RIGHT_PARENTHESIS;
terminal LEFT_SQUARE_PARENTHESIS;
terminal RIGHT_SQUARE_PARENTHESIS;
terminal LEFT_BRACKET;
terminal RIGHT_BRACKET;
terminal LESS_THAN;
terminal GREATER_THAN;
terminal LESS_THAN_OR_EQUAL_TO;
terminal GREATER_THAN_OR_EQUAL_TO;
terminal EQUAL_TO;
terminal NOT_EQUAL_TO;
terminal NOT;
terminal TERNARY_IF;
terminal TERNARY_ELSE;
terminal PARAMETER_SEPARATOR;
terminal FINAL;
terminal INT_PRIMITIVE;
terminal CHAR_PRIMITIVE;
terminal BOOL_PRIMITIVE;
terminal FLOAT_PRIMITIVE;

terminal String VAR;

terminal String ID;
terminal int INTLIT;
terminal char CHARLIT;
terminal String STRLIT;
terminal double FLOATLIT;
terminal boolean BOOL_TRUE;
terminal boolean BOOL_FALSE;

nonterminal Program program;

nonterminal MemberDecls memberdecls;
nonterminal FieldDecls fielddecls;
nonterminal MethodDecls methoddecls;
nonterminal ArgDecls argdecls;
nonterminal Stmts stmts;
nonterminal Args args;
nonterminal ReadList readlist;
nonterminal Printlist printlist;
nonterminal PrintLineList printlinelist;

nonterminal ArgDeclList argdecllist;

nonterminal FieldDecl fielddecl;
nonterminal MethodDecl methoddecl;
nonterminal ArgDecl argdecl;
nonterminal Stmt stmt;

nonterminal OptionalLexeme optionalfinal;
nonterminal OptionalExpr optionalexpr;
nonterminal OptionalLexeme optionalsemi;

nonterminal ReturnType returntype;
nonterminal Lexeme type;

nonterminal IfEnd ifend;
nonterminal Name name;
nonterminal Expr expr;
nonterminal Lexeme binaryop;

program         ::= CLASS ID:id LEFT_BRACKET memberdecls:memberDecls RIGHT_BRACKET
                {:
                    RESULT = Program.builder()
                                .id(id)
                                .memberDecls(memberDecls)
                                .build();
                :};

memberdecls     ::= fielddecls:fieldDecls methoddecls:methodDecls
                {:
                    RESULT = MemberDecls.builder()
                                .fieldDecls(fieldDecls)
                                .methodDecls(methodDecls)
                                .build();
                :};

fielddecls      ::= fielddecl:fieldDecl fielddecls:fieldDecls
                {:
                    RESULT = FieldDecls.builder()
                                .fieldDecl(fieldDecl)
                                .fieldDecls(fieldDecls)
                                .build();
                :}
                |
                {:  RESULT = FieldDecls.builder().build();  :};

methoddecls     ::= methoddecl:methodDecl methoddecls:methodDecls
                {:
                    RESULT = MethodDecls.builder()
                                .methodDecl(methodDecl)
                                .methodDecls(methodDecls)
                                .build();
                :}
                |
                {:
                    RESULT = MethodDecls.builder().build();
                :};

fielddecl       ::= optionalfinal:optionalFinal type:type ID:id optionalexpr:optionalExpr SEMI
                {:
                    RESULT = ExpressionFieldDecl.builder()
                                .type(type)
                                .id(id)
                                .optionalFinal(optionalFinal)
                                .optionalExpr(optionalExpr)
                                .build();
                :}
                |   type:type ID:id LEFT_SQUARE_PARENTHESIS INTLIT:size RIGHT_SQUARE_PARENTHESIS SEMI
                {:
                    RESULT = ArrayFieldDecl.builder()
                                .type(type)
                                .id(id)
                                .size(size)
                                .build();
                :};

optionalfinal   ::= FINAL
                {:
                    RESULT = OptionalLexeme.shown(Lexeme.of("final"));
                :}
                |
                {:
                    RESULT = OptionalLexeme.hidden();
                :};

optionalexpr    ::= EQ expr:expr
                {:
                    RESULT = OptionalExpr.shownExpr(expr);
                :}
                |
                {:
                    RESULT = OptionalExpr.hidden();
                :};

methoddecl      ::= returntype:returnType ID:id LEFT_PARENTHESIS argdecls:argDecls RIGHT_PARENTHESIS LEFT_BRACKET
                    fielddecls:fieldDecls stmts:stmts RIGHT_BRACKET optionalsemi:optionalSemi
                {:
                    RESULT = MethodDecl.builder()
                                .returnType(returnType)
                                .id(id)
                                .argDecls(argDecls)
                                .fieldDecls(fieldDecls)
                                .stmts(stmts)
                                .optionalSemi(optionalSemi)
                                .build();
                :};

optionalsemi    ::= SEMI
                {:
                    RESULT = OptionalLexeme.shown(Lexeme.of(";"));
                :}
                |
                {:
                    RESULT = OptionalLexeme.hidden();
                :};

returntype      ::= type:type
                {:
                    RESULT = ReturnType.withType(type);
                :}
                |   VOID
                {:
                    RESULT = ReturnType.withoutType();
                :};

type            ::= INT_PRIMITIVE
                {:
                    RESULT = Lexeme.of("int");
                :}
                |   CHAR_PRIMITIVE
                {:
                    RESULT = Lexeme.of("char");
                :}
                |   BOOL_PRIMITIVE
                {:
                    RESULT = Lexeme.of("bool");
                :}
                |   FLOAT_PRIMITIVE
                {:
                    RESULT = Lexeme.of("float");
                :};

argdecls        ::= argdecllist:argDeclList
                {:
                    RESULT = ArgDecls.of(argDeclList);
                :}
                |
                {:
                    RESULT = ArgDecls.empty();
                :};

argdecllist     ::= argdecl:argDecl PARAMETER_SEPARATOR argdecllist:argDeclList
                {:
                    RESULT = ArgDeclList.builder()
                                .argDecl(argDecl)
                                .argDeclList(argDeclList)
                                .build();
                :}
                |
                {:
                    RESULT = ArgDeclList.builder().build();
                :};

argdecl         ::= type:type ID:id
                {:
                    RESULT = RegularArgDecl.builder()
                                .type(type)
                                .id(id)
                                .build();
                :}
                |   type:type ID:id LEFT_SQUARE_PARENTHESIS RIGHT_SQUARE_PARENTHESIS
                {:
                    RESULT = ArrayArgDecl.builder()
                                .type(type)
                                .id(id)
                                .build();
                :};

stmts           ::= stmt:stmt stmts:stmts
                {:
                    RESULT = Stmts.builder()
                                .stmt(stmt)
                                .stmts(stmts)
                                .build();
                :}
                |
                {:
                    RESULT = Stmts.builder().build();
                :};

stmt            ::= IF LEFT_PARENTHESIS expr:expr RIGHT_PARENTHESIS stmt:stmt ifend:ifEnd
                {:
                    RESULT = IfStmt.builder()
                                .expr(expr)
                                .stmt(stmt)
                                .ifEnd(ifEnd)
                                .build();
                :}
                |   WHILE LEFT_PARENTHESIS expr:expr RIGHT_PARENTHESIS stmt:stmt
                {:
                    RESULT = WhileStmt.builder()
                                .expr(expr)
                                .stmt(stmt)
                                .build();
                :}
                |   name:name EQ expr:expr SEMI
                {:
                    RESULT = ReassignStmt.builder()
                                .name(name)
                                .expr(expr)
                                .build();
                :}
                |   READ LEFT_PARENTHESIS readlist:readList RIGHT_PARENTHESIS SEMI
                {:
                    RESULT = ReadStmt.of(readList);
                :}
                |   PRINT LEFT_PARENTHESIS printlist:printList RIGHT_PARENTHESIS SEMI
                {:
                    RESULT = PrintStmt.of(printList);
                :}
                |   PRINTLINE LEFT_PARENTHESIS printlinelist:printLineList RIGHT_PARENTHESIS SEMI
                {:
                    RESULT = PrintLineStmt.of(printLineList);
                :}
                |   ID:id LEFT_PARENTHESIS RIGHT_PARENTHESIS SEMI
                {:
                    RESULT = MethodInvocationStmt.blank(id);
                :}
                |   ID:id LEFT_PARENTHESIS args:args RIGHT_PARENTHESIS SEMI
                {:
                    RESULT = MethodInvocationStmt.withArgs(id, args);
                :}
                |   RETURN SEMI
                {:
                    RESULT = ReturnStmt.blank();
                :}
                |   RETURN expr:expr SEMI
                {:
                    RESULT = ReturnStmt.withExpr(expr);
                :}
                |   name:name DOUBLE_PLUS SEMI
                {:
                    RESULT = IncrementStmt.withName(name);
                :}
                |   name:name DOUBLE_MINUS SEMI
                {:
                    RESULT = DecrementStmt.withName(name);
                :}
                |   LEFT_BRACKET fielddecls:fieldDecls stmts:stmts RIGHT_BRACKET optionalsemi:optionalSemi
                {:
                    RESULT = BodyStmt.builder()
                                .fieldDecls(fieldDecls)
                                .stmts(stmts)
                                .optionalSemi(optionalSemi)
                                .build();
                :};

ifend           ::= ELSE stmt:stmt
                {:
                    RESULT = IfEnd.withStmt(stmt);
                :}
                |
                {:
                    RESULT = IfEnd.end();
                :};

name            ::= ID:id
                {:
                    RESULT = Name.simple(id);
                :}
                |   ID:id LEFT_SQUARE_PARENTHESIS expr:expr RIGHT_SQUARE_PARENTHESIS
                {:
                    RESULT = Name.array(id, expr);
                :};

args            ::= expr:expr PARAMETER_SEPARATOR args:args
                {:
                    RESULT = Args.builder()
                                .expr(expr)
                                .args(args)
                                .build();
                :}
                |   expr:expr
                {:
                    RESULT = Args.builder()
                                .expr(expr)
                                .build();
                :};

readlist        ::= name:name PARAMETER_SEPARATOR readlist:readlist
                {:
                    RESULT = ReadList.builder()
                                .name(name)
                                .readList(readlist)
                                .build();
                :}
                |   name:name
                {:
                    RESULT = ReadList.builder()
                                .name(name)
                                .build();
                :};

printlist       ::= expr:expr PARAMETER_SEPARATOR printlist:printList
                {:
                    RESULT = PrintList.builder()
                                .expr(expr)
                                .printList(printList)
                                .build();
                :}
                |   expr:expr
                {:
                    RESULT = PrintList.builder()
                                .expr(expr)
                                .build();
                :};

printlinelist   ::= printlist:printList
                {:
                    RESULT = PrintLineList.withPrintList(printList);
                :}
                |
                {:
                    RESULT = PrintLineList.empty();
                :};

expr            ::= name:name
                {:
                    RESULT = Expr.simple(name);
                :}
                |   ID:id LEFT_PARENTHESIS RIGHT_PARENTHESIS
                {:
                    RESULT = Expr.simpleInvocation(id);
                :}
                |   ID:id LEFT_PARENTHESIS args:args RIGHT_PARENTHESIS
                {:
                    RESULT = Expr.invocation(id, args);
                :}
                |   INTLIT:intlit
                {:
                    RESULT = Expr.intlit(intlit);
                :}
                |   CHARLIT:charlit
                {:
                    RESULT = Expr.charlit(charlit);
                :}
                |   STRLIT:strlit
                {:
                    RESULT = Expr.strlit(strlit);
                :}
                |   FLOATLIT:floatlit
                {:
                    RESULT = Expr.floatlit(floatlit);
                :}
                |   BOOL_TRUE
                {:
                    RESULT = Expr.boollit(true);
                :}
                |   BOOL_FALSE
                {:
                    RESULT = Expr.boollit(false);
                :}
                |   LEFT_PARENTHESIS expr:expr RIGHT_PARENTHESIS
                {:
                    RESULT = Expr.parenthesized(expr);
                :}
                |   NOT expr:expr
                {:
                    RESULT = Expr.not(expr);
                :}
                |   MINUS expr:expr
                {:
                    RESULT = Expr.minus(expr);
                :}
                |   PLUS expr:expr
                {:
                    RESULT = Expr.plus(expr);
                :}
                |   LEFT_PARENTHESIS type:type RIGHT_PARENTHESIS expr:expr
                {:
                    RESULT = Expr.casting(type, expr);
                :}
                |   expr:expr1 binaryop:binaryOp expr:expr2
                {:
                    RESULT = Expr.binaryOp(expr1, binaryOp, expr2);
                :}
                |   LEFT_PARENTHESIS expr:expr TERNARY_IF expr:exprTrue TERNARY_ELSE expr:exprFalse RIGHT_PARENTHESIS
                {:
                    RESULT = Expr.ternary(expr, exprTrue, exprFalse);
                :};

binaryop        ::= TIMES
                {:
                    RESULT = Lexeme.of("*");
                :}
                |   DIVIDE
                {:
                    RESULT = Lexeme.of("/");
                :}
                |   PLUS
                {:
                    RESULT = Lexeme.of("+");
                :}
                |   MINUS
                {:
                    RESULT = Lexeme.of("-");
                :}
                |   LESS_THAN
                {:
                    RESULT = Lexeme.of("<");
                :}
                |   GREATER_THAN
                {:
                    RESULT = Lexeme.of(">");
                :}
                |   LESS_THAN_OR_EQUAL_TO
                {:
                    RESULT = Lexeme.of("<=");
                :}
                |   GREATER_THAN_OR_EQUAL_TO
                {:
                    RESULT = Lexeme.of(">=");
                :}
                |   EQUAL_TO
                {:
                    RESULT = Lexeme.of("==");
                :}
                |   NOT_EQUAL_TO
                {:
                    RESULT = Lexeme.of("<>");
                :}
                |   DOUBLE_OR
                {:
                    RESULT = Lexeme.of("||");
                :}
                |   DOUBLE_AND
                {:
                    RESULT = Lexeme.of("&&");
                :};
