TEST_FILE=test1.as
TEST_FILES_DIR=.\tests
OUTPUT_FILES_DIR=.

JAVA=java
JAVAC=javac

JFLEXJAR=.\libs\jflex-full-1.8.2.jar
JFLEX=$(JAVA) -jar $(JFLEXJAR)
CUPJAR=.\libs\java-cup-11b.jar
CUP=$(JAVA) -jar $(CUPJAR)

SRC_FILES_DIR=src
CLASS_FILES_DIR=.\out\production\project-1

COMPILE_CP=$(SRC_FILES_DIR);$(CUPJAR)
RUN_CP=$(CLASS_FILES_DIR);$(CUPJAR)

GENERATED_FILES=src\Grammar.java	src\parser.java	src\sym.java
PARSER_FILES=$(GENERATED_FILES)	src\ParserTest.java
LEXER_FILES=$(GENERATED_FILES)	src\LexerTest.java

default: runParser

.SUFFIXES: $(SUFFIXES) .class .java

.java.class:
		$(JAVAC) -d $(CLASS_FILES_DIR) -cp $(COMPILE_CP) $*.java

runParser: all $(PARSER_FILES:java=class)
		$(JAVA) -cp $(RUN_CP) ParserTest $(TEST_FILES_DIR)\$(TEST_FILE) > $(OUTPUT_FILES_DIR)\$(TEST_FILE)-output.txt
		type $(TEST_FILE)-output.txt

runLexer: all $(LEXER_FILES:java=class)
		$(JAVA) -cp $(RUN_CP) LexerTest $(TEST_FILES_DIR)\$(TEST_FILE) > $(OUTPUT_FILES_DIR)\$(TEST_FILE)-output.txt
		type $(TEST_FILE)-output.txt

all: Grammar.java parser.java move

Grammar.java: grammar.jflex
		$(JFLEX) grammar.jflex

parser.java: tokens.cup
		$(CUP) -interface < tokens.cup

parserD.java: tokens.cup
		$(CUP) -interface -dump < tokens.cup

move:
		move *.java src

clean:
		del $(CLASS_FILES_DIR)\*.class $(GENERATED_FILES) $(OUTPUT_FILE) $(TEST_FILE)-output.txt
